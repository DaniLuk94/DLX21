library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use work.constants.all;

entity tb_Branch_Cond_Unit is
end entity;

architecture test of tb_Branch_Cond_Unit is

component Branch_Cond_Unit is
	generic(NBIT : integer);
	port( A         : in std_logic_vector(NBIT-1 downto 0);
		  ALU_OPC   : in aluOp; -- coming from Control Unit
		  JUMP_TYPE : in std_logic_vector(1 downto 0);
		  PC_SEL    : out std_logic_vector(1 downto 0);
		  ZERO      : out std_logic);
end component;

  constant tb_period : time := 10ns;

   signal A : std_logic_vector(NBIT-1 downto 0);
   signal ALU_OPC   : aluOp; -- coming from Control Unit
   signal JUMP_TYPE : std_logic_vector(1 downto 0);
   signal PC_SEL    : std_logic_vector(1 downto 0);
   signal ZERO      : std_logic;

begin

  DUT : Branch_Cond_Unit
    generic map (NBIT => 32)
    port map(
                 A => A,
                 ALU_OPC => ALU_OPC,
                 JUMP_TYPE => JUMP_TYPE,
                 PC_SEL => PC_SEL,
                 ZERO => ZERO
                );

  stimuli : process

                procedure apply_stimuli (
                        constant A_val : in integer;
                        constant ALU_OPC_val : in aluOP;
                        constant JUMP_TYPE_val : in integer;
                        
                        signal A : out std_logic_vector(NBIT-1 downto 0);
                        signal ALU_OPC : out aluOp;
                        signal JUMP_TYPE : out std_logic_vector(1 downto 0)
                        ) is
                begin
                       A <= std_logic_vector(to_signed(A_val, NBIT)); --integer
                       ALU_OPC <= ALU_OPC_val;
                       JUMP_TYPE <= std_logic_vector(to_unsigned(JUMP_TYPE_val,2));
                       
                        wait for tb_period;
                       
                end apply_stimuli;
  begin

   --apply_stimuli(input values, signals);

    apply_stimuli(7, ADDS, jmp, A, ALU_OPC, JUMP_TYPE);

    for jmp in 0 to 3 loop
      apply_stimuli(7, BEQZS, jmp, A, ALU_OPC, JUMP_TYPE);
    end loop;

    for jmp in 0 to 3 loop
      apply_stimuli(7, BNEZS, jmp, A, ALU_OPC, JUMP_TYPE);
    end loop;
  
  end process;

end test;
